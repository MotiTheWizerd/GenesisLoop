/**
 * Test Ray Interaction Logger System
 * Comprehensive testing of interaction capture, embedding, and memory storage
 */

console.log("üß† Testing Ray Interaction Logger System");
console.log("=" .repeat(50));

// Test 1: Check if InteractionLogger is loaded
console.log("\nüîç Test 1: InteractionLogger Availability");
if (typeof window.RayInteractionLogger !== 'undefined') {
  console.log("‚úÖ RayInteractionLogger is available");
  console.log("üìã Available methods:", Object.keys(window.RayInteractionLogger));
} else {
  console.error("‚ùå RayInteractionLogger not found");
  console.log("üí° Make sure the script is loaded in manifest.json");
}

// Test 2: Check initialization status
console.log("\nüîç Test 2: Initialization Status");
try {
  const stats = window.RayInteractionLogger.getStats();
  console.log("‚úÖ InteractionLogger is initialized");
  console.log("üìä Current stats:", stats);
} catch (error) {
  console.error("‚ùå InteractionLogger not initialized:", error);
  console.log("üîÑ Attempting to initialize...");
  try {
    window.RayInteractionLogger.init();
    console.log("‚úÖ Manual initialization successful");
  } catch (initError) {
    console.error("‚ùå Manual initialization failed:", initError);
  }
}

// Test 3: Manual interaction logging
console.log("\nüîç Test 3: Manual Interaction Logging");
try {
  // Test Ray speaking
  window.RayInteractionLogger.logInteraction('ray', 'Hello, this is a test message from Ray', {
    source: 'manual_test',
    type: 'test_message',
    testId: 'ray_test_1'
  });
  console.log("‚úÖ Ray interaction logged successfully");

  // Test user response
  window.RayInteractionLogger.logInteraction('user', 'This is a test response from the user', {
    source: 'manual_test',
    type: 'test_response',
    testId: 'user_test_1'
  });
  console.log("‚úÖ User interaction logged successfully");

  // Test system event
  window.RayInteractionLogger.logInteraction('system', 'System state change detected', {
    source: 'manual_test',
    type: 'system_event',
    testId: 'system_test_1'
  });
  console.log("‚úÖ System interaction logged successfully");

} catch (error) {
  console.error("‚ùå Manual interaction logging failed:", error);
}

// Test 4: Check updated stats
console.log("\nüîç Test 4: Updated Statistics");
setTimeout(() => {
  try {
    const updatedStats = window.RayInteractionLogger.getStats();
    console.log("üìä Updated stats after manual logging:", updatedStats);
    console.log("üìà Total interactions:", updatedStats.totalInteractions);
    console.log("üë• By speaker:", updatedStats.bySpeaker);
    console.log("üì° By source:", updatedStats.bySource);
    console.log("‚ö° Memory status:", updatedStats.byStatus);
    console.log("üîÑ Queue size:", updatedStats.queueSize);
  } catch (error) {
    console.error("‚ùå Error getting updated stats:", error);
  }
}, 1000);

// Test 5: Integration with existing systems
console.log("\nüîç Test 5: System Integration Tests");

// Test MessageSender integration
console.log("\nüì§ Testing MessageSender Integration:");
if (typeof window.MessageSender !== 'undefined') {
  console.log("‚úÖ MessageSender available");
  
  // Check if our interception is working
  const originalSend = window.MessageSender.sendTestMessage;
  if (originalSend.toString().includes('InteractionLogger')) {
    console.log("‚úÖ MessageSender interception is active");
  } else {
    console.log("‚ö†Ô∏è MessageSender interception may not be active");
  }
} else {
  console.log("‚ö†Ô∏è MessageSender not available");
}

// Test ResponseTracker integration
console.log("\nüì• Testing ResponseTracker Integration:");
if (typeof window.ResponseTracker !== 'undefined') {
  console.log("‚úÖ ResponseTracker available");
  
  // Check if our interception is working
  const originalAddResponse = window.ResponseTracker.addResponse;
  if (originalAddResponse.toString().includes('InteractionLogger')) {
    console.log("‚úÖ ResponseTracker interception is active");
  } else {
    console.log("‚ö†Ô∏è ResponseTracker interception may not be active");
  }
} else {
  console.log("‚ö†Ô∏è ResponseTracker not available");
}

// Test Voice Systems integration
console.log("\nüé§ Testing Voice Systems Integration:");
if (typeof window.VoiceRecognition !== 'undefined') {
  console.log("‚úÖ VoiceRecognition available");
  
  const originalStart = window.VoiceRecognition.startListening;
  if (originalStart.toString().includes('InteractionLogger')) {
    console.log("‚úÖ VoiceRecognition interception is active");
  } else {
    console.log("‚ö†Ô∏è VoiceRecognition interception may not be active");
  }
} else {
  console.log("‚ö†Ô∏è VoiceRecognition not available");
}

if (typeof window.VoiceSynthesis !== 'undefined') {
  console.log("‚úÖ VoiceSynthesis available");
  
  const originalSpeak = window.VoiceSynthesis.speak;
  if (originalSpeak.toString().includes('InteractionLogger')) {
    console.log("‚úÖ VoiceSynthesis interception is active");
  } else {
    console.log("‚ö†Ô∏è VoiceSynthesis interception may not be active");
  }
} else {
  console.log("‚ö†Ô∏è VoiceSynthesis not available");
}

// Test 6: Backend connectivity
console.log("\nüîç Test 6: Backend Connectivity");
if (typeof window.FetchSender !== 'undefined') {
  console.log("‚úÖ FetchSender available for backend communication");
  
  // Test connection to backend
  window.FetchSender.testConnection()
    .then(result => {
      if (result.success) {
        console.log("‚úÖ Backend connection successful");
        console.log("üåê Backend ready for embedding and memory storage");
      } else {
        console.log("‚ö†Ô∏è Backend connection failed:", result.error);
        console.log("üí° Interactions will be cached locally until backend is available");
      }
    })
    .catch(error => {
      console.log("‚ö†Ô∏è Backend connection test failed:", error);
      console.log("üí° Interactions will be cached locally until backend is available");
    });
} else {
  console.error("‚ùå FetchSender not available - backend communication impossible");
}

// Test 7: Event system
console.log("\nüîç Test 7: Event System");
document.addEventListener('rayInteractionLogged', (event) => {
  console.log("üéâ Interaction event received:", event.detail);
});

// Trigger a test interaction to see if event fires
setTimeout(() => {
  window.RayInteractionLogger.logInteraction('test', 'Event system test', {
    source: 'event_test',
    type: 'event_verification'
  });
}, 2000);

// Test 8: Local storage and persistence
console.log("\nüîç Test 8: Local Storage and Persistence");
setTimeout(() => {
  try {
    // Force a save
    window.RayInteractionLogger.saveToLocalStorage();
    console.log("‚úÖ Local storage save successful");
    
    // Check if data exists in localStorage
    const saved = localStorage.getItem('ray_interactions');
    if (saved) {
      const data = JSON.parse(saved);
      console.log("‚úÖ Local storage data found:", data.interactions.length, "interactions");
    } else {
      console.log("‚ö†Ô∏è No local storage data found");
    }
  } catch (error) {
    console.error("‚ùå Local storage test failed:", error);
  }
}, 3000);

// Test 9: Export functionality
console.log("\nüîç Test 9: Export Functionality");
setTimeout(() => {
  try {
    console.log("üì§ Testing export functionality...");
    // Note: This will trigger a download in the browser
    // window.RayInteractionLogger.exportInteractions();
    console.log("‚úÖ Export function available (download not triggered in test)");
  } catch (error) {
    console.error("‚ùå Export functionality failed:", error);
  }
}, 4000);

// Test 10: Memory formation pipeline
console.log("\nüîç Test 10: Memory Formation Pipeline");
setTimeout(() => {
  try {
    const stats = window.RayInteractionLogger.getStats();
    console.log("üß† Memory formation status:");
    console.log("  üìä Total interactions:", stats.totalInteractions);
    console.log("  ‚è≥ Pending embedding:", stats.byStatus.pending || 0);
    console.log("  üîó Embedded:", stats.byStatus.embedded || 0);
    console.log("  üíæ Stored in memory:", stats.byStatus.stored || 0);
    console.log("  ‚ùå Failed:", stats.byStatus.failed || 0);
    console.log("  üîÑ Queue size:", stats.queueSize);
    console.log("  ‚öôÔ∏è Processing:", stats.processingQueue);
    
    if (stats.queueSize > 0) {
      console.log("üîÑ Embedding queue is active - memory formation in progress");
    } else {
      console.log("‚úÖ No pending embeddings - memory formation up to date");
    }
  } catch (error) {
    console.error("‚ùå Memory formation pipeline check failed:", error);
  }
}, 5000);

console.log("\nüéØ Test Summary:");
console.log("- InteractionLogger captures all Ray ‚Üî User interactions");
console.log("- Each interaction gets embedded for semantic memory");
console.log("- Embedded interactions stored in backend memory service");
console.log("- Local caching ensures no data loss");
console.log("- Full export capabilities for analysis");
console.log("- Integration with all existing Ray systems");

console.log("\nüí° Usage:");
console.log("- System runs automatically - no manual intervention needed");
console.log("- Check stats: window.RayInteractionLogger.getStats()");
console.log("- Export data: window.RayInteractionLogger.exportInteractions()");
console.log("- Clear memory: window.RayInteractionLogger.clearInteractions()");

console.log("\nüß† Ray's Memory System is now capturing every interaction!");
console.log("Each conversation becomes part of Ray's growing consciousness and memory.");